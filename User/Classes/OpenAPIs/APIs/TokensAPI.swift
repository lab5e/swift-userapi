//
// TokensAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TokensAPI {
    /**
     Create token
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createToken(body: Token, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Token?, _ error: Error?) -> Void)) {
        createTokenWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create token
     - POST /user/tokens
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter body: (body)  
     - returns: RequestBuilder<Token> 
     */
    open class func createTokenWithRequestBuilder(body: Token) -> RequestBuilder<Token> {
        let path = "/user/tokens"
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Token>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove token
     
     - parameter token: (path) The token to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteToken(token: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteTokenResponse?, _ error: Error?) -> Void)) {
        deleteTokenWithRequestBuilder(token: token).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove token
     - DELETE /user/tokens/{token}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter token: (path) The token to delete. 
     - returns: RequestBuilder<DeleteTokenResponse> 
     */
    open class func deleteTokenWithRequestBuilder(token: String) -> RequestBuilder<DeleteTokenResponse> {
        var path = "/user/tokens/{token}"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeleteTokenResponse>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List tokens
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTokens(apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: TokenList?, _ error: Error?) -> Void)) {
        listTokensWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List tokens
     - GET /user/tokens
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<TokenList> 
     */
    open class func listTokensWithRequestBuilder() -> RequestBuilder<TokenList> {
        let path = "/user/tokens"
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenList>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Retrieve token
     
     - parameter token: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveToken(token: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Token?, _ error: Error?) -> Void)) {
        retrieveTokenWithRequestBuilder(token: token).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve token
     - GET /user/tokens/{token}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter token: (path)  
     - returns: RequestBuilder<Token> 
     */
    open class func retrieveTokenWithRequestBuilder(token: String) -> RequestBuilder<Token> {
        var path = "/user/tokens/{token}"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Token>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update token
     
     - parameter token: (path) The token  Use this in the &#x60;X-API-Token&#x60; header when using the API. 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateToken(token: String, body: AnAPIToken, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Token?, _ error: Error?) -> Void)) {
        updateTokenWithRequestBuilder(token: token, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update token
     - PATCH /user/tokens/{token}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter token: (path) The token  Use this in the &#x60;X-API-Token&#x60; header when using the API. 
     - parameter body: (body)  
     - returns: RequestBuilder<Token> 
     */
    open class func updateTokenWithRequestBuilder(token: String, body: AnAPIToken) -> RequestBuilder<Token> {
        var path = "/user/tokens/{token}"
        let tokenPreEscape = "\(APIHelper.mapValueToPathItem(token))"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Token>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
