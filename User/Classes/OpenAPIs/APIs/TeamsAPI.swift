//
// TeamsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TeamsAPI {
    /**
     Accept invite
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func acceptInvite(body: AcceptInviteRequest, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Team?, _ error: Error?) -> Void)) {
        acceptInviteWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept invite
     - POST /user/teams/accept
     - Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team's invites and cannot be reused.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter body: (body)  
     - returns: RequestBuilder<Team> 
     */
    open class func acceptInviteWithRequestBuilder(body: AcceptInviteRequest) -> RequestBuilder<Team> {
        let path = "/user/teams/accept"
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create team
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTeam(body: Team, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Team?, _ error: Error?) -> Void)) {
        createTeamWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create team
     - POST /user/teams
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter body: (body)  
     - returns: RequestBuilder<Team> 
     */
    open class func createTeamWithRequestBuilder(body: Team) -> RequestBuilder<Team> {
        let path = "/user/teams"
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete invite
     
     - parameter teamId: (path) The team ID 
     - parameter code: (path) The invite code. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInvite(teamId: String, code: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteInviteResponse?, _ error: Error?) -> Void)) {
        deleteInviteWithRequestBuilder(teamId: teamId, code: code).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete invite
     - DELETE /user/teams/{teamId}/invites/{code}
     - Delete an invite created earlier. You must be an administrator of the team to perform this action
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - parameter code: (path) The invite code. 
     - returns: RequestBuilder<DeleteInviteResponse> 
     */
    open class func deleteInviteWithRequestBuilder(teamId: String, code: String) -> RequestBuilder<DeleteInviteResponse> {
        var path = "/user/teams/{teamId}/invites/{code}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeleteInviteResponse>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove member
     
     - parameter teamId: (path) The team ID 
     - parameter userId: (path) The user ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMember(teamId: String, userId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Member?, _ error: Error?) -> Void)) {
        deleteMemberWithRequestBuilder(teamId: teamId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove member
     - DELETE /user/teams/{teamId}/members/{userId}
     - Remove a member from the team. You must be an administrator to do this. You can't remove yourself from the team.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - parameter userId: (path) The user ID 
     - returns: RequestBuilder<Member> 
     */
    open class func deleteMemberWithRequestBuilder(teamId: String, userId: String) -> RequestBuilder<Member> {
        var path = "/user/teams/{teamId}/members/{userId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Member>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove team
     
     - parameter teamId: (path) The team ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTeam(teamId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Team?, _ error: Error?) -> Void)) {
        deleteTeamWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove team
     - DELETE /user/teams/{teamId}
     - Update the team. You must be an administrator of the team to edit it.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - returns: RequestBuilder<Team> 
     */
    open class func deleteTeamWithRequestBuilder(teamId: String) -> RequestBuilder<Team> {
        var path = "/user/teams/{teamId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Generate invite
     
     - parameter teamId: (path) The team ID 
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateInvite(teamId: String, body: InviteRequest, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Invite?, _ error: Error?) -> Void)) {
        generateInviteWithRequestBuilder(teamId: teamId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate invite
     - POST /user/teams/{teamId}/invites
     - Update the team. You must be an administrator of the team to edit it.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - parameter body: (body)  
     - returns: RequestBuilder<Invite> 
     */
    open class func generateInviteWithRequestBuilder(teamId: String, body: InviteRequest) -> RequestBuilder<Invite> {
        var path = "/user/teams/{teamId}/invites"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Invite>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List invites
     
     - parameter teamId: (path) The team ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listInvites(teamId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: InviteList?, _ error: Error?) -> Void)) {
        listInvitesWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List invites
     - GET /user/teams/{teamId}/invites
     - Update the team. You must be an administrator of the team to edit it.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - returns: RequestBuilder<InviteList> 
     */
    open class func listInvitesWithRequestBuilder(teamId: String) -> RequestBuilder<InviteList> {
        var path = "/user/teams/{teamId}/invites"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InviteList>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List teams
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTeams(apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: TeamList?, _ error: Error?) -> Void)) {
        listTeamsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List teams
     - GET /user/teams
     - Update the team. You must be an administrator of the team to edit it.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - returns: RequestBuilder<TeamList> 
     */
    open class func listTeamsWithRequestBuilder() -> RequestBuilder<TeamList> {
        let path = "/user/teams"
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TeamList>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Retrieve invite
     
     - parameter teamId: (path) The team ID 
     - parameter code: (path) The invite code. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveInvite(teamId: String, code: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Invite?, _ error: Error?) -> Void)) {
        retrieveInviteWithRequestBuilder(teamId: teamId, code: code).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve invite
     - GET /user/teams/{teamId}/invites/{code}
     - Read a single invite from the team's set of non-redeemed invites.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - parameter code: (path) The invite code. 
     - returns: RequestBuilder<Invite> 
     */
    open class func retrieveInviteWithRequestBuilder(teamId: String, code: String) -> RequestBuilder<Invite> {
        var path = "/user/teams/{teamId}/invites/{code}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Invite>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Retrieve member
     
     - parameter teamId: (path) The team ID 
     - parameter userId: (path) The user ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveMember(teamId: String, userId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Member?, _ error: Error?) -> Void)) {
        retrieveMemberWithRequestBuilder(teamId: teamId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve member
     - GET /user/teams/{teamId}/members/{userId}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - parameter userId: (path) The user ID 
     - returns: RequestBuilder<Member> 
     */
    open class func retrieveMemberWithRequestBuilder(teamId: String, userId: String) -> RequestBuilder<Member> {
        var path = "/user/teams/{teamId}/members/{userId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Member>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Retrieve team
     
     - parameter teamId: (path) The team ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveTeam(teamId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Team?, _ error: Error?) -> Void)) {
        retrieveTeamWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve team
     - GET /user/teams/{teamId}
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - returns: RequestBuilder<Team> 
     */
    open class func retrieveTeamWithRequestBuilder(teamId: String) -> RequestBuilder<Team> {
        var path = "/user/teams/{teamId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List members
     
     - parameter teamId: (path) The team ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveTeamMembers(teamId: String, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: MemberList?, _ error: Error?) -> Void)) {
        retrieveTeamMembersWithRequestBuilder(teamId: teamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List members
     - GET /user/teams/{teamId}/members
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path) The team ID 
     - returns: RequestBuilder<MemberList> 
     */
    open class func retrieveTeamMembersWithRequestBuilder(teamId: String) -> RequestBuilder<MemberList> {
        var path = "/user/teams/{teamId}/members"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MemberList>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update member
     
     - parameter teamId: (path)  
     - parameter userId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMember(teamId: String, userId: String, body: Member, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Member?, _ error: Error?) -> Void)) {
        updateMemberWithRequestBuilder(teamId: teamId, userId: userId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update member
     - PATCH /user/teams/{teamId}/members/{userId}
     - You must be an administrator of the team to update member settings
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path)  
     - parameter userId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Member> 
     */
    open class func updateMemberWithRequestBuilder(teamId: String, userId: String, body: Member) -> RequestBuilder<Member> {
        var path = "/user/teams/{teamId}/members/{userId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Member>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update team
     
     - parameter teamId: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTeam(teamId: String, body: Team, apiResponseQueue: DispatchQueue = UserAPI.apiResponseQueue, completion: @escaping ((_ data: Team?, _ error: Error?) -> Void)) {
        updateTeamWithRequestBuilder(teamId: teamId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update team
     - PATCH /user/teams/{teamId}
     - Update the team. You must be an administrator of the team to edit it.
     - API Key:
       - type: apiKey X-API-Token 
       - name: APIToken
     - parameter teamId: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<Team> 
     */
    open class func updateTeamWithRequestBuilder(teamId: String, body: Team) -> RequestBuilder<Team> {
        var path = "/user/teams/{teamId}"
        let teamIdPreEscape = "\(APIHelper.mapValueToPathItem(teamId))"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = UserAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Team>.Type = UserAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
